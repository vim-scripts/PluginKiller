*pluginkiller.txt*	Plugin Killer				Feb 07, 2009

Author:  Charles E. Campbell, Jr.  <NdrOchip@ScampbellPfamily.AbizM>
	  (remove NOSPAM from Campbell's email first)
Copyright: (c) 2006 by Charles E. Campbell, Jr.	*pluginkiller-copyright*
           The VIM LICENSE applies to pluginkiller.vim
           (see |copyright|) except use "pluginkiller instead of "Vim"
	   No warranty, express or implied.  Use At-Your-Own-Risk.

==============================================================================
1. Contents				*pluginkiller* *pluginkiller-contents*
>
	   Purpose: to help plugin writers find options that interfere
	   with their plugin's operation before their users do.
<
	1. Contents..............................: |pluginkiller-contents|
	2. Pluginkiller Manual...................: |pluginkiller-manual|
	3. Pluginkiller Usage....................: |pluginkiller-usage|
	4. Installing the PluginKiller...........: |pluginkiller-install|
	5. History...............................: |pluginkiller-history|

==============================================================================
2. Pluginkiller Manual					*pluginkiller-manual*

							*pluginkiller-pk*
	:PK	This command loads the pluginkiller's settings into the
		window under test -- ie. initializes your plugin with the
		pluginkiller's "nasty" vim option settings.  It will also
		start up the PLUGINKILLER server as required.
							*pluginkiller-pkr*
	:PKr	Resets the pluginkiller so that all of its problematic
		settings are enabled.
							*pluginkiller-pkg*
	:PKg	Used in the pluginkiller.vim window; it indicates that the
		settings yielded good behavior.
							*pluginkiller-pkb*
	:PKb	Used in the pluginkiller.vim window; it indicates that the
		settings yielded bad behavior.

==============================================================================
3. Pluginkiller Usage					*pluginkiller-usage*

	The PluginKiller helps ViM plugin writers to determine which options
	that users might set that will cause problems with their plugin before
	their users do!

	To do this, the PluginKiller utilizes two instantiations of vim.  The
	first one (see Step 1 below) is the pluginkiller server; it keeps a
	copy of the current potential trouble-making options.  The second vim
	is your working vim; in it you exercise your plugin.

	Whenever your plugin works with the currently active trouble-makers,
	type :PKg (for PluginKiller-good).  This tells the PluginKiller server
	about the nice set of options it selected, and it responds with a new
	set.

	On the other hand, whenever your plugin isn't performing up to your
	exacting specifications, type :PKb (for PluginKiller-bad).  This
	command tells the PluginKiller server about the trouble it caused, and
	the PluginKiller responds with a smaller set of potential
	troublemakers.

	You'll need to repeat trying out your plugin and typing :PKg or
	:PKb until the PluginKiller has found the culprit option.  Its OK
	to quit the second vim and to use :PK to resume working with the
	PluginKiller server -- whether you need to quit and resume depends
	on how your plugin operates -- :PK just reloads the current settings
	that the PluginKiller wants to have tried out.

						*pluginkiller-steps*
	Step 1: Bring up vim with a test file where you can exercise your
		plugin with the pluginkiller.  Type >
			:PK
<		This command sets up the pluginkiller server window; it will
		show >
			" Plugin Killer Testing Options: start
<		at the top of the screen in the server, followed by a number
		of options that often cause problems with plugins.

	Step 2: In the vim holding the test file (NOT the pluginkiller
		server):

			UNTIL a message pops up about what option your plugin
			      is having a problem with:

			      Exercise/run your plugin

			      IF your plugin works, type >
				:PKg
<			      Otherwise, type >
				:PKb
<
		The :PKg (for good plugin behavior) and the :PKb (for bad
		plugin behavior) commands implement a binary search technique
		to determine which option is giving your plugin trouble.  If,
		as may sadly be the case, more than one such option is giving
		your plugin fits, you may have to run through this process
		several times.

		What I usually do is create two functions that look something
		like this: >

			fun! s:SaveUserSettings()
			  let b:keep_optionname= &optionname
			  ...
			  setlocal [no]optionname
			endfun
			fun! s:RestoreUserSettings()
			  let &l:optionname= b:keep_optionname
			endfun
<
		At the top of any function in my plugin that's being called, I
		call the s:SaveUserSettings() function.  This function saves
		the user's current settings that caused my plugin difficulties
		and then sets them to something that doesn't.  Before any
		return and the end of the function I call
		s:RestoreUserFunctions(), which, of course, restores the
		user's settings.

		The l:optionname is the local version of the option, and the
		setlocal means I only change the local option to support my
		plugin.

==============================================================================
4. Installing the PluginKiller				*pluginkiller-install*

	First, you really _don't_ want to install the pluginkiller in your
	normal .vim/plugin directory.

	1. You will need vimball v18 or later; you can get it from

		http://mysite.verizon.net/astronaut/vim/index.html#VimFuncs
		as "Vimball Archiver", or from
		http://vim.sourceforge.net/scripts/script.php?script_id=1502

	   Be sure to remove all vestiges of any earlier vimball versions
	   such as comes with vim 7.0: typically, that means, as superuser: >

	   	cd /usr/local/share/vim/vim70
		/bin/rm plugin/vimball*.vim
		/bin/rm autoload/vimball*.vim
		/bin/rm doc/pi_vimball.txt
<
	2. vim pluginkiller.vba.gz
	   :so %
	   :q

	   This will create >
	   	PluginKiller/
		     |- pluginkiller.vim
		     \- pluginkiller
		doc/
		     \- pluginkiller.txt
<
	The directions under |pluginkiller-steps| give detailed information on
	how to use the pluginkiller.

	2. Enable the help: >
	   	:helptags ~/.vim/doc
<

==============================================================================
5. PluginKiller History					*pluginkiller-history*

	v3  Oct 10, 2007 * added more options for pluginkiller checkout:
	                   acd, insertmode, num, spell
	v2  May 01, 2006 * the acd option is not always defined
	    Oct 19, 2006 * :PK will initialize the PLUGINKILLER
	                   server automatically, as required.
   	v1  Mar 08, 2006 * initial release


vim: ts=8
